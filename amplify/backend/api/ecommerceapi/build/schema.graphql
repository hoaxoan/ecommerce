type User {
  id: ID!
  ownerId: ID!
  username: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  owner: String
  role: String
}

type Shop {
  id: ID!
  name: String!
  userId: ID
  createdAt: String
  updatedAt: String
  owner: String
}

type Category {
  id: ID!
  name: String!
  products(createdAt: ModelStringKeyConditionInput, filter: ModelProductFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductConnection
  createdAt: String
  updatedAt: String
  owner: String
}

type Product {
  id: ID!
  name: String!
  price: Int
  category: Category
  images(createdAt: ModelStringKeyConditionInput, filter: ModelImageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelImageConnection
  createdAt: String
  updatedAt: String
  owner: String
  categoryId: String
}

type Image {
  id: ID!
  fullsize: S3Object!
  thumbnail: S3Object
  contentType: String
  height: Int
  width: Int
  size: Int
  product: Product
  createdAt: String
  updatedAt: String
  owner: String
  productId: String
}

type S3Object @aws_iam @aws_cognito_user_pools {
  region: String!
  bucket: String!
  key: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  ownerId: ModelIDInput
  username: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  role: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getShop(id: ID!): Shop
  listShops(filter: ModelShopFilterInput, limit: Int, nextToken: String): ModelShopConnection
  getCategory(id: ID!): Category
  listCategorys(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  getImage(id: ID!): Image
  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection
}

input CreateUserInput {
  id: ID
  ownerId: ID!
  username: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  owner: String
  role: String
}

input UpdateUserInput {
  id: ID!
  ownerId: ID
  username: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  owner: String
  role: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createShop(input: CreateShopInput!, condition: ModelShopConditionInput): Shop
  updateShop(input: UpdateShopInput!, condition: ModelShopConditionInput): Shop
  deleteShop(input: DeleteShopInput!, condition: ModelShopConditionInput): Shop
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
  createImage(input: CreateImageInput!, condition: ModelImageConditionInput): Image
  updateImage(input: UpdateImageInput!, condition: ModelImageConditionInput): Image
  deleteImage(input: DeleteImageInput!, condition: ModelImageConditionInput): Image
}

input ModelUserConditionInput {
  ownerId: ModelIDInput
  username: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  role: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser(owner: String!): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(owner: String!): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(owner: String!): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateShop(owner: String!): Shop @aws_subscribe(mutations: ["createShop"])
  onUpdateShop(owner: String!): Shop @aws_subscribe(mutations: ["updateShop"])
  onDeleteShop(owner: String!): Shop @aws_subscribe(mutations: ["deleteShop"])
  onCreateCategory(owner: String!): Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory(owner: String!): Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory(owner: String!): Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateProduct(owner: String!): Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct(owner: String!): Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct(owner: String!): Product @aws_subscribe(mutations: ["deleteProduct"])
  onCreateImage(owner: String!): Image @aws_subscribe(mutations: ["createImage"])
  onUpdateImage(owner: String!): Image @aws_subscribe(mutations: ["updateImage"])
  onDeleteImage(owner: String!): Image @aws_subscribe(mutations: ["deleteImage"])
}

type ModelShopConnection {
  items: [Shop]
  nextToken: String
}

input ModelShopFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  and: [ModelShopFilterInput]
  or: [ModelShopFilterInput]
  not: ModelShopFilterInput
}

input CreateShopInput {
  id: ID
  name: String!
  userId: ID
  createdAt: String
  updatedAt: String
  owner: String
}

input UpdateShopInput {
  id: ID!
  name: String
  userId: ID
  createdAt: String
  updatedAt: String
  owner: String
}

input DeleteShopInput {
  id: ID
}

input ModelShopConditionInput {
  name: ModelStringInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelShopConditionInput]
  or: [ModelShopConditionInput]
  not: ModelShopConditionInput
}

type ModelCategoryConnection {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  name: String!
  createdAt: String
  updatedAt: String
  owner: String
}

input UpdateCategoryInput {
  id: ID!
  name: String
  createdAt: String
  updatedAt: String
  owner: String
}

input DeleteCategoryInput {
  id: ID
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
}

type ModelProductConnection {
  items: [Product]
  nextToken: String
}

input ModelProductFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  price: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  categoryId: ModelStringInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

input CreateProductInput {
  id: ID
  name: String!
  price: Int
  createdAt: String
  updatedAt: String
  owner: String
  categoryId: String
  productCategoryId: ID
}

input UpdateProductInput {
  id: ID!
  name: String
  price: Int
  createdAt: String
  updatedAt: String
  owner: String
  categoryId: String
  productCategoryId: ID
}

input DeleteProductInput {
  id: ID
}

input ModelProductConditionInput {
  name: ModelStringInput
  price: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  categoryId: ModelStringInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
}

input S3ObjectInput {
  region: String!
  bucket: String!
  key: String!
}

type ModelImageConnection {
  items: [Image]
  nextToken: String
}

input ModelImageFilterInput {
  id: ModelIDInput
  contentType: ModelStringInput
  height: ModelIntInput
  width: ModelIntInput
  size: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
  productId: ModelStringInput
  and: [ModelImageFilterInput]
  or: [ModelImageFilterInput]
  not: ModelImageFilterInput
}

input CreateImageInput {
  id: ID
  fullsize: S3ObjectInput!
  thumbnail: S3ObjectInput
  contentType: String
  height: Int
  width: Int
  size: Int
  createdAt: String
  updatedAt: String
  owner: String
  productId: String
  imageProductId: ID
}

input UpdateImageInput {
  id: ID!
  fullsize: S3ObjectInput
  thumbnail: S3ObjectInput
  contentType: String
  height: Int
  width: Int
  size: Int
  createdAt: String
  updatedAt: String
  owner: String
  productId: String
  imageProductId: ID
}

input DeleteImageInput {
  id: ID
}

input ModelImageConditionInput {
  contentType: ModelStringInput
  height: ModelIntInput
  width: ModelIntInput
  size: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  productId: ModelStringInput
  and: [ModelImageConditionInput]
  or: [ModelImageConditionInput]
  not: ModelImageConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
